{
  "ABeautifulGame": {
    "name": "ABeautifulGame",
    "metadata_name": "ABeautifulGame",
    "summary": "Chess set using transmission and volume.",
    "description": "Chess set using transmission and volume."
  },
  "AlphaBlendModeTest": {
    "name": "AlphaBlendModeTest",
    "metadata_name": "AlphaBlendModeTest",
    "summary": "Tests alpha modes and settings.",
    "description": "Tests alpha modes and settings."
  },
  "AnimatedCube": {
    "name": "AnimatedCube",
    "metadata_name": "AnimatedCube",
    "summary": "Same as 'Cube', but having a linear rotation animation.",
    "description": "Same as 'Cube', but having a linear rotation animation."
  },
  "AnimatedMorphCube": {
    "name": "AnimatedMorphCube",
    "metadata_name": "AnimatedMorphCube",
    "summary": "Demonstrates a simple cube with two simple morph targets and an animation that transitions between them both.",
    "description": "Demonstrates a simple cube with two simple morph targets and an animation that transitions between them both."
  },
  "AnimatedTriangle": {
    "name": "AnimatedTriangle",
    "metadata_name": "AnimatedTriangle",
    "summary": "This sample is similar to the Triangle, but the node has a rotation property that is modified with a simple animation",
    "description": "This sample is similar to the Triangle, but the node has a rotation property that is modified with a simple animation"
  },
  "AnisotropyBarnLamp": {
    "name": "AnisotropyBarnLamp",
    "metadata_name": "AnisotropyBarnLamp",
    "summary": "Wayfair AnisotropyBarnLamp model using anisotropy, clearcoat, emissive_strength, transmission, volume, and basisu extensions.",
    "description": "Wayfair AnisotropyBarnLamp model using anisotropy, clearcoat, emissive_strength, transmission, volume, and basisu extensions."
  },
  "AnisotropyDiscTest": {
    "name": "AnisotropyDiscTest",
    "metadata_name": "AnisotropyDiscTest",
    "summary": "This model tests the texturemap for KHR_materials_anisotropy.",
    "description": "This model tests the texturemap for KHR_materials_anisotropy."
  },
  "AnisotropyRotationTest": {
    "name": "AnisotropyRotationTest",
    "metadata_name": "AnisotropyRotationTest",
    "summary": "This model tests rotational offsets for KHR_materials_anisotropy.",
    "description": "This model tests rotational offsets for KHR_materials_anisotropy."
  },
  "AnisotropyStrengthTest": {
    "name": "AnisotropyStrengthTest",
    "metadata_name": "AnisotropyStrengthTest",
    "summary": "This model tests the strength parameter for KHR_materials_anisotropy.",
    "description": "This model tests the strength parameter for KHR_materials_anisotropy."
  },
  "AntiqueCamera": {
    "name": "AntiqueCamera",
    "metadata_name": "AntiqueCamera",
    "summary": "Static model of old camera on a tripod. [Issues: non-Khronos mark]",
    "description": "Static model of old camera on a tripod. [Issues: non-Khronos mark]"
  },
  "AttenuationTest": {
    "name": "AttenuationTest",
    "metadata_name": "AttenuationTest",
    "summary": "Tests the interactions between attenuation, thickness, and scale.",
    "description": "Tests the interactions between attenuation, thickness, and scale."
  },
  "Avocado": {
    "name": "Avocado",
    "metadata_name": "Avocado",
    "summary": "A natural object created with Core glTF 2.0",
    "description": "A natural object created with Core glTF 2.0"
  },
  "BarramundiFish": {
    "name": "BarramundiFish",
    "metadata_name": "BarramundiFish",
    "summary": "A fish created with Core glTF 2.0",
    "description": "A fish created with Core glTF 2.0"
  },
  "BoomBox": {
    "name": "BoomBox",
    "metadata_name": "BoomBox",
    "summary": "A common object with glowing front panel created with Core glTF 2.0.",
    "description": "A common object with glowing front panel created with Core glTF 2.0."
  },
  "BoomBoxwithAxes": {
    "name": "BoomBoxwithAxes",
    "metadata_name": "BoomBoxwithAxes",
    "summary": "Shows X, Y, and Z axis default orientations.",
    "description": "Shows X, Y, and Z axis default orientations."
  },
  "Box": {
    "name": "Box",
    "metadata_name": "Box",
    "summary": "One mesh and one material. Start with this.",
    "description": "One mesh and one material. Start with this."
  },
  "BoxWithSpaces": {
    "name": "BoxWithSpaces",
    "metadata_name": "BoxWithSpaces",
    "summary": "Box with URI-encoded spaces in the texture names used by a simple PBR material.",
    "description": "Box with URI-encoded spaces in the texture names used by a simple PBR material."
  },
  "BoxAnimated": {
    "name": "BoxAnimated",
    "metadata_name": "BoxAnimated",
    "summary": "Rotation and Translation Animations. Start with this to test animations.",
    "description": "Rotation and Translation Animations. Start with this to test animations."
  },
  "Boxwithinterleavedpositionandnormalattributes": {
    "name": "Boxwithinterleavedpositionandnormalattributes",
    "metadata_name": "Boxwithinterleavedpositionandnormalattributes",
    "summary": "Box example with interleaved position and normal attributes.",
    "description": "Box example with interleaved position and normal attributes."
  },
  "BoxTextured": {
    "name": "BoxTextured",
    "metadata_name": "BoxTextured",
    "summary": "Box with a power-of-2 texture. [Issues: non-Khronos mark]",
    "description": "Box with a power-of-2 texture. [Issues: non-Khronos mark]"
  },
  "BoxTexturednot2^N": {
    "name": "BoxTexturednot2^N",
    "metadata_name": "BoxTexturednot2^N",
    "summary": "Box with a non-power-of-2 (NPOT) texture. Not all implementations support NPOT textures. [Issues: non-Khronos mark]",
    "description": "Box with a non-power-of-2 (NPOT) texture. Not all implementations support NPOT textures. [Issues: non-Khronos mark]"
  },
  "BoxVertexColors": {
    "name": "BoxVertexColors",
    "metadata_name": "BoxVertexColors",
    "summary": "A simple unit cube that uses vertex colors, stored in the `COLORS_0` attribute. ",
    "description": "A simple unit cube that uses vertex colors, stored in the `COLORS_0` attribute. "
  },
  "BrainStem": {
    "name": "BrainStem",
    "metadata_name": "BrainStem",
    "summary": "Animations. Skins.",
    "description": "Animations. Skins."
  },
  "Cameras": {
    "name": "Cameras",
    "metadata_name": "Cameras",
    "summary": "A sample with two different camera objects",
    "description": "A sample with two different camera objects"
  },
  "CarbonFibreBall": {
    "name": "CarbonFibreBall",
    "metadata_name": "CarbonFibreBall",
    "summary": "Example of anisotropy applied to a ball with a simulated carbon fiber surface.",
    "description": "Example of anisotropy applied to a ball with a simulated carbon fiber surface."
  },
  "CesiumMan": {
    "name": "CesiumMan",
    "metadata_name": "CesiumMan",
    "summary": "Textured. Animations. Skins. [Issues: non-Khronos mark]",
    "description": "Textured. Animations. Skins. [Issues: non-Khronos mark]"
  },
  "CesiumMilkTruck": {
    "name": "CesiumMilkTruck",
    "metadata_name": "CesiumMilkTruck",
    "summary": "Textured. Multiple nodes/meshes. Animations. [Issues: non-Khronos mark]",
    "description": "Textured. Multiple nodes/meshes. Animations. [Issues: non-Khronos mark]"
  },
  "ChairDamaskPurplegold": {
    "name": "ChairDamaskPurplegold",
    "metadata_name": "ChairDamaskPurplegold",
    "summary": "Use of sheen to create a high-end small seat (damask).",
    "description": "Use of sheen to create a high-end small seat (damask)."
  },
  "ClearCoatCarPaint": {
    "name": "ClearCoatCarPaint",
    "metadata_name": "ClearCoatCarPaint",
    "summary": "This model is a sphere using the glTF ClearCoat extension overtop a car paint base material. ",
    "description": "This model is a sphere using the glTF ClearCoat extension overtop a car paint base material. "
  },
  "KHR_materials_clearcoatTest": {
    "name": "KHR_materials_clearcoatTest",
    "metadata_name": "KHR_materials_clearcoatTest",
    "summary": "Tests if the KHR_materials_clearcoat extension is supported properly.",
    "description": "Tests if the KHR_materials_clearcoat extension is supported properly."
  },
  "ClearcoatWicker": {
    "name": "ClearcoatWicker",
    "metadata_name": "ClearcoatWicker",
    "summary": "This model is a sphere using the glTF ClearCoat to create a wicker material covered with a wrinkled plastic clearcoat material.",
    "description": "This model is a sphere using the glTF ClearCoat to create a wicker material covered with a wrinkled plastic clearcoat material."
  },
  "Corset": {
    "name": "Corset",
    "metadata_name": "Corset",
    "summary": " ",
    "description": " "
  },
  "Cube": {
    "name": "Cube",
    "metadata_name": "Cube",
    "summary": "A cube with non-smoothed faces.",
    "description": "A cube with non-smoothed faces."
  },
  "DamagedHelmet": {
    "name": "DamagedHelmet",
    "metadata_name": "DamagedHelmet",
    "summary": "Flight helmet with damage",
    "description": "Flight helmet with damage"
  },
  "DiffuseTransmissionPlant": {
    "name": "DiffuseTransmissionPlant",
    "metadata_name": "DiffuseTransmissionPlant",
    "summary": "Potted plant asset using Diffuse Transmission extension.",
    "description": "Potted plant asset using Diffuse Transmission extension."
  },
  "DiffuseTransmissionTeacup": {
    "name": "DiffuseTransmissionTeacup",
    "metadata_name": "DiffuseTransmissionTeacup",
    "summary": "DiffuseTransmissionTeacup model using Diffuse Transmission extension.",
    "description": "DiffuseTransmissionTeacup model using Diffuse Transmission extension."
  },
  "DirectionalLight": {
    "name": "DirectionalLight",
    "metadata_name": "DirectionalLight",
    "summary": "Verification of light calculations",
    "description": "Verification of light calculations"
  },
  "DispersionTest": {
    "name": "DispersionTest",
    "metadata_name": "DispersionTest",
    "summary": "This model tests the KHR_materials_dispersion extension.",
    "description": "This model tests the KHR_materials_dispersion extension."
  },
  "DragonAttenuation": {
    "name": "DragonAttenuation",
    "metadata_name": "DragonAttenuation",
    "summary": "Dragon with background, using material variants, transmission, and volume.",
    "description": "Dragon with background, using material variants, transmission, and volume."
  },
  "DragonDispersion": {
    "name": "DragonDispersion",
    "metadata_name": "DragonDispersion",
    "summary": "Dragon with background, using dispersion, transmission, and volume.",
    "description": "Dragon with background, using dispersion, transmission, and volume."
  },
  "Duck": {
    "name": "Duck",
    "metadata_name": "Duck",
    "summary": "The COLLADA duck. One texture.",
    "description": "The COLLADA duck. One texture."
  },
  "EmissiveStrengthTest": {
    "name": "EmissiveStrengthTest",
    "metadata_name": "EmissiveStrengthTest",
    "summary": "Tests if the KHR_materials_emissive_strength extension is supported properly.",
    "description": "Tests if the KHR_materials_emissive_strength extension is supported properly."
  },
  "EnvironmentTest": {
    "name": "EnvironmentTest",
    "metadata_name": "EnvironmentTest",
    "summary": "A simple scene with metal and dielectric spheres that range between 0 and 1 roughness. Useful for testing environment lighting.",
    "description": "A simple scene with metal and dielectric spheres that range between 0 and 1 roughness. Useful for testing environment lighting."
  },
  "FlightHelmet": {
    "name": "FlightHelmet",
    "metadata_name": "FlightHelmet",
    "summary": "Displayed flight helmet on a wooden stand.",
    "description": "Displayed flight helmet on a wooden stand."
  },
  "Fox": {
    "name": "Fox",
    "metadata_name": "Fox",
    "summary": "Multiple animations cycles: Survey, Walk, Run.",
    "description": "Multiple animations cycles: Survey, Walk, Run."
  },
  "GlamVelvetSofa": {
    "name": "GlamVelvetSofa",
    "metadata_name": "GlamVelvetSofa",
    "summary": "Sofa using material variants, sheen, and specular.",
    "description": "Sofa using material variants, sheen, and specular."
  },
  "GlassBrokenWindow": {
    "name": "GlassBrokenWindow",
    "metadata_name": "GlassBrokenWindow",
    "summary": "This asset demonstrates the combination of two transparency methods in glTF: KHR_materials_transmission for glass and alphaMode:'MASK' for holes in the broken glass.",
    "description": "This asset demonstrates the combination of two transparency methods in glTF: KHR_materials_transmission for glass and alphaMode:'MASK' for holes in the broken glass."
  },
  "GlassHurricaneCandleHolder": {
    "name": "GlassHurricaneCandleHolder",
    "metadata_name": "GlassHurricaneCandleHolder",
    "summary": "Glass holder using Materials Tranmission and Materials Volume extensions.",
    "description": "Glass holder using Materials Tranmission and Materials Volume extensions."
  },
  "GlassVasewithFlowers": {
    "name": "GlassVasewithFlowers",
    "metadata_name": "GlassVasewithFlowers",
    "summary": "This model compares transparency methods for representing glass in glTF: alphaMode:'BLEND' (left) versus the extensions KHR_materials_transmission and KHR_materials_volume (right).",
    "description": "This model compares transparency methods for representing glass in glTF: alphaMode:'BLEND' (left) versus the extensions KHR_materials_transmission and KHR_materials_volume (right)."
  },
  "IORTestGrid": {
    "name": "IORTestGrid",
    "metadata_name": "IORTestGrid",
    "summary": "Grid of spheres over a checkered backdrop to test IOR rendering.",
    "description": "Grid of spheres over a checkered backdrop to test IOR rendering."
  },
  "InterpolationTest": {
    "name": "InterpolationTest",
    "metadata_name": "InterpolationTest",
    "summary": "A sample with three different animation interpolations",
    "description": "A sample with three different animation interpolations"
  },
  "IridescenceAbalone": {
    "name": "IridescenceAbalone",
    "metadata_name": "IridescenceAbalone",
    "summary": "A model of an abalone shell with highly iridescent interior.",
    "description": "A model of an abalone shell with highly iridescent interior."
  },
  "IridescenceDielectricSpheres": {
    "name": "IridescenceDielectricSpheres",
    "metadata_name": "IridescenceDielectricSpheres",
    "summary": "Tests KHR_materials_iridescence on a non-metallic material.",
    "description": "Tests KHR_materials_iridescence on a non-metallic material."
  },
  "IridescenceLamp": {
    "name": "IridescenceLamp",
    "metadata_name": "IridescenceLamp",
    "summary": "Wayfair Lamp model using transmission, volume, and KHR_materials_iridescence.",
    "description": "Wayfair Lamp model using transmission, volume, and KHR_materials_iridescence."
  },
  "IridescenceMetallicSpheres": {
    "name": "IridescenceMetallicSpheres",
    "metadata_name": "IridescenceMetallicSpheres",
    "summary": "Tests KHR_materials_iridescence on a metallic material.",
    "description": "Tests KHR_materials_iridescence on a metallic material."
  },
  "IridescenceSuzanne": {
    "name": "IridescenceSuzanne",
    "metadata_name": "IridescenceSuzanne",
    "summary": "Further tests KHR_materials_iridescence.",
    "description": "Further tests KHR_materials_iridescence."
  },
  "IridescentDishwithOlives": {
    "name": "IridescentDishwithOlives",
    "metadata_name": "IridescentDishwithOlives",
    "summary": "Dish using transmission, volume, IOR, and specular. [Issues: non-Khronos mark]",
    "description": "Dish using transmission, volume, IOR, and specular. [Issues: non-Khronos mark]"
  },
  "Lantern": {
    "name": "Lantern",
    "metadata_name": "Lantern",
    "summary": "Old wooden street light.",
    "description": "Old wooden street light."
  },
  "LampwithPunctualLights": {
    "name": "LampwithPunctualLights",
    "metadata_name": "LampwithPunctualLights",
    "summary": "Lamp using punctual lights.",
    "description": "Lamp using punctual lights."
  },
  "MandarinOrange": {
    "name": "MandarinOrange",
    "metadata_name": "MandarinOrange",
    "summary": "Scattering of light through the tangerine using the glTF diffuse transmission extension is shown in this test.",
    "description": "Scattering of light through the tangerine using the glTF diffuse transmission extension is shown in this test."
  },
  "MaterialsVariantsShoe": {
    "name": "MaterialsVariantsShoe",
    "metadata_name": "MaterialsVariantsShoe",
    "summary": "A model of a shoe that illustrates use of the KHR_materials_variants extension with three materials included in the asset.",
    "description": "A model of a shoe that illustrates use of the KHR_materials_variants extension with three materials included in the asset."
  },
  "MeshPrimitiveModes": {
    "name": "MeshPrimitiveModes",
    "metadata_name": "MeshPrimitiveModes",
    "summary": "An example that shows rendering modes that are supported for mesh primitives in glTF.",
    "description": "An example that shows rendering modes that are supported for mesh primitives in glTF."
  },
  "Metal-RoughSpheres": {
    "name": "Metal-RoughSpheres",
    "metadata_name": "Metal-RoughSpheres",
    "summary": "Tests various metal and roughness values (texture mapped).",
    "description": "Tests various metal and roughness values (texture mapped)."
  },
  "Metal-RoughSpheres(textureless)": {
    "name": "Metal-RoughSpheres(textureless)",
    "metadata_name": "Metal-RoughSpheres(textureless)",
    "summary": "Tests various metal and roughness values (textureless).",
    "description": "Tests various metal and roughness values (textureless)."
  },
  "Morph-PrimitivesTest": {
    "name": "Morph-PrimitivesTest",
    "metadata_name": "Morph-PrimitivesTest",
    "summary": "Tests a morph target on multiple primitives.",
    "description": "Tests a morph target on multiple primitives."
  },
  "MorphStressTest": {
    "name": "MorphStressTest",
    "metadata_name": "MorphStressTest",
    "summary": "Tests up to 8 morph targets.",
    "description": "Tests up to 8 morph targets."
  },
  "MosquitoInAmber": {
    "name": "MosquitoInAmber",
    "metadata_name": "MosquitoInAmber",
    "summary": "Mosquito in amber by Sketchfab, using transmission, IOR, and volume.",
    "description": "Mosquito in amber by Sketchfab, using transmission, IOR, and volume."
  },
  "MultiUVTest": {
    "name": "MultiUVTest",
    "metadata_name": "MultiUVTest",
    "summary": "This model has two uv texture coordinates and tests a second set of texture coordinates.",
    "description": "This model has two uv texture coordinates and tests a second set of texture coordinates."
  },
  "MultipleScenes": {
    "name": "MultipleScenes",
    "metadata_name": "MultipleScenes",
    "summary": "A simple glTF asset with two scenes. Each scene consists of one node with one mesh. ",
    "description": "A simple glTF asset with two scenes. Each scene consists of one node with one mesh. "
  },
  "NegativeScaleTest": {
    "name": "NegativeScaleTest",
    "metadata_name": "NegativeScaleTest",
    "summary": "This model tests what happens when a glTF node has negative scaling.",
    "description": "This model tests what happens when a glTF node has negative scaling."
  },
  "Normal-TangentMirrorTest": {
    "name": "Normal-TangentMirrorTest",
    "metadata_name": "Normal-TangentMirrorTest",
    "summary": "Tests an engine's ability to load supplied tangent vectors for a normal map.",
    "description": "Tests an engine's ability to load supplied tangent vectors for a normal map."
  },
  "Normal-TangentTest": {
    "name": "Normal-TangentTest",
    "metadata_name": "Normal-TangentTest",
    "summary": "Tests an engine's ability to automatically generate tangent vectors for a normal map.",
    "description": "Tests an engine's ability to automatically generate tangent vectors for a normal map."
  },
  "OrientationTest": {
    "name": "OrientationTest",
    "metadata_name": "OrientationTest",
    "summary": "Tests node translations and rotations.",
    "description": "Tests node translations and rotations."
  },
  "PotOfCoals": {
    "name": "PotOfCoals",
    "metadata_name": "PotOfCoals",
    "summary": "Burnt copper pot with a clearcoat, containing emissive hot coals.",
    "description": "Burnt copper pot with a clearcoat, containing emissive hot coals."
  },
  "PrimitiveModeNormalsTest": {
    "name": "PrimitiveModeNormalsTest",
    "metadata_name": "PrimitiveModeNormalsTest",
    "summary": "Tests rendering of points, lines, and triangles with and without normals.",
    "description": "Tests rendering of points, lines, and triangles with and without normals."
  },
  "RecursiveSkeletons": {
    "name": "RecursiveSkeletons",
    "metadata_name": "RecursiveSkeletons",
    "summary": "Tests unusual skinning cases with reused meshes and recursive skeletons.",
    "description": "Tests unusual skinning cases with reused meshes and recursive skeletons."
  },
  "RiggedFigure": {
    "name": "RiggedFigure",
    "metadata_name": "RiggedFigure",
    "summary": "Animations. Skins.",
    "description": "Animations. Skins."
  },
  "RiggedSimple": {
    "name": "RiggedSimple",
    "metadata_name": "RiggedSimple",
    "summary": "Animations. Skins. Start with this to test skinning.",
    "description": "Animations. Skins. Start with this to test skinning."
  },
  "SciFiHelmet": {
    "name": "SciFiHelmet",
    "metadata_name": "SciFiHelmet",
    "summary": "Futuristic helmet",
    "description": "Futuristic helmet"
  },
  "SheenChair": {
    "name": "SheenChair",
    "metadata_name": "SheenChair",
    "summary": "Chair using material variants and sheen.",
    "description": "Chair using material variants and sheen."
  },
  "SheenCloth": {
    "name": "SheenCloth",
    "metadata_name": "SheenCloth",
    "summary": "Fabric example using sheen.",
    "description": "Fabric example using sheen."
  },
  "SheenTestGrid": {
    "name": "SheenTestGrid",
    "metadata_name": "SheenTestGrid",
    "summary": "Grid of spheres over a checkered backdrop to test Sheen rendering.",
    "description": "Grid of spheres over a checkered backdrop to test Sheen rendering."
  },
  "SimpleInstancing": {
    "name": "SimpleInstancing",
    "metadata_name": "SimpleInstancing",
    "summary": "A simple example for the EXT_mesh_gpu_instancing extension.",
    "description": "A simple example for the EXT_mesh_gpu_instancing extension."
  },
  "SimpleMaterial": {
    "name": "SimpleMaterial",
    "metadata_name": "SimpleMaterial",
    "summary": "A simple glTF asset with a material",
    "description": "A simple glTF asset with a material"
  },
  "SimpleMeshes": {
    "name": "SimpleMeshes",
    "metadata_name": "SimpleMeshes",
    "summary": "A simple scene with two nodes, both containing the same mesh, namely a mesh with a single mesh.primitive with a single indexed triangle with multiple attributes (positions, normals and texture coordinates), but without a material",
    "description": "A simple scene with two nodes, both containing the same mesh, namely a mesh with a single mesh.primitive with a single indexed triangle with multiple attributes (positions, normals and texture coordinates), but without a material"
  },
  "SimpleMorph": {
    "name": "SimpleMorph",
    "metadata_name": "SimpleMorph",
    "summary": "A triangle with a morph animation applied",
    "description": "A triangle with a morph animation applied"
  },
  "SimpleSkin": {
    "name": "SimpleSkin",
    "metadata_name": "SimpleSkin",
    "summary": "A simple example of vertex skinning in glTF",
    "description": "A simple example of vertex skinning in glTF"
  },
  "SimpleSparseAccessor": {
    "name": "SimpleSparseAccessor",
    "metadata_name": "SimpleSparseAccessor",
    "summary": "A simple mesh that uses sparse accessors",
    "description": "A simple mesh that uses sparse accessors"
  },
  "SimpleTexture": {
    "name": "SimpleTexture",
    "metadata_name": "SimpleTexture",
    "summary": "A simple glTF asset with a texture",
    "description": "A simple glTF asset with a texture"
  },
  "SpecGlossVsMetalRough": {
    "name": "SpecGlossVsMetalRough",
    "metadata_name": "SpecGlossVsMetalRough",
    "summary": "Tests if the KHR_materials_pbrSpecularGlossiness extension is supported properly.",
    "description": "Tests if the KHR_materials_pbrSpecularGlossiness extension is supported properly."
  },
  "SpecularSilkPouf": {
    "name": "SpecularSilkPouf",
    "metadata_name": "SpecularSilkPouf",
    "summary": "Wayfair SpecularSilkPouf model using sheen and specular extensions.",
    "description": "Wayfair SpecularSilkPouf model using sheen and specular extensions."
  },
  "SpecularTest": {
    "name": "SpecularTest",
    "metadata_name": "SpecularTest",
    "summary": "Tests if the KHR_materials_specular extension is supported correctly.",
    "description": "Tests if the KHR_materials_specular extension is supported correctly."
  },
  "Sponza": {
    "name": "Sponza",
    "metadata_name": "Sponza",
    "summary": "Building interior, often used to test lighting.",
    "description": "Building interior, often used to test lighting."
  },
  "StainedGlassLamp": {
    "name": "StainedGlassLamp",
    "metadata_name": "StainedGlassLamp",
    "summary": " ",
    "description": " "
  },
  "Suzanne": {
    "name": "Suzanne",
    "metadata_name": "Suzanne",
    "summary": "Blender's test model of the chimpanzee Suzanne.",
    "description": "Blender's test model of the chimpanzee Suzanne."
  },
  "TextureCoordinateTest": {
    "name": "TextureCoordinateTest",
    "metadata_name": "TextureCoordinateTest",
    "summary": "Shows how XYZ and UV positions relate to displayed geometry.",
    "description": "Shows how XYZ and UV positions relate to displayed geometry."
  },
  "TextureEncodingTest": {
    "name": "TextureEncodingTest",
    "metadata_name": "TextureEncodingTest",
    "summary": "This asset tests that textures are sampled with correct transfer functions.",
    "description": "This asset tests that textures are sampled with correct transfer functions."
  },
  "TextureLinearInterpolationTest": {
    "name": "TextureLinearInterpolationTest",
    "metadata_name": "TextureLinearInterpolationTest",
    "summary": "Tests that linear texture interpolation is performed on linear values, i.e. after sRGB decoding.",
    "description": "Tests that linear texture interpolation is performed on linear values, i.e. after sRGB decoding."
  },
  "TextureSettingsTest": {
    "name": "TextureSettingsTest",
    "metadata_name": "TextureSettingsTest",
    "summary": "Tests single/double-sided and various texturing modes.",
    "description": "Tests single/double-sided and various texturing modes."
  },
  "TextureTransformMultiTest": {
    "name": "TextureTransformMultiTest",
    "metadata_name": "TextureTransformMultiTest",
    "summary": "Tests if the KHR_texture_transform extension is supported for several inputs.",
    "description": "Tests if the KHR_texture_transform extension is supported for several inputs."
  },
  "TextureTransformTest": {
    "name": "TextureTransformTest",
    "metadata_name": "TextureTransformTest",
    "summary": "Tests if the KHR_texture_transform extension is supported for BaseColor.",
    "description": "Tests if the KHR_texture_transform extension is supported for BaseColor."
  },
  "ToyCar": {
    "name": "ToyCar",
    "metadata_name": "ToyCar",
    "summary": "Toy car example using transmission, clearcoat, and sheen.",
    "description": "Toy car example using transmission, clearcoat, and sheen."
  },
  "TransmissionRoughnessTest": {
    "name": "TransmissionRoughnessTest",
    "metadata_name": "TransmissionRoughnessTest",
    "summary": "Tests the interaction between roughness and IOR.",
    "description": "Tests the interaction between roughness and IOR."
  },
  "TransmissionTest": {
    "name": "TransmissionTest",
    "metadata_name": "TransmissionTest",
    "summary": "Tests if the KHR_materials_transmission extension is supported properly.",
    "description": "Tests if the KHR_materials_transmission extension is supported properly."
  },
  "TransmissionThinwallTestGrid": {
    "name": "TransmissionThinwallTestGrid",
    "metadata_name": "TransmissionThinwallTestGrid",
    "summary": "Grid of spheres over a checkered backdrop to test Thinfilm and IOR rendering.",
    "description": "Grid of spheres over a checkered backdrop to test Thinfilm and IOR rendering."
  },
  "Triangle": {
    "name": "Triangle",
    "metadata_name": "Triangle",
    "summary": "A very simple glTF asset: The basic structure is the same as in 'Triangle Without Indices', but here, the mesh primitive describes an indexed geometry.",
    "description": "A very simple glTF asset: The basic structure is the same as in 'Triangle Without Indices', but here, the mesh primitive describes an indexed geometry."
  },
  "TriangleWithoutIndices": {
    "name": "TriangleWithoutIndices",
    "metadata_name": "TriangleWithoutIndices",
    "summary": "The simplest possible glTF asset: A single scene with a single node and a single mesh with a single mesh.primitive with a single triangle with a single attribute, without indices and without a material",
    "description": "The simplest possible glTF asset: A single scene with a single node and a single mesh with a single mesh.primitive with a single triangle with a single attribute, without indices and without a material"
  },
  "TwoSidedPlane": {
    "name": "TwoSidedPlane",
    "metadata_name": "TwoSidedPlane",
    "summary": "A plane having the two sided material parameter enabled.",
    "description": "A plane having the two sided material parameter enabled."
  },
  "Unicode❤♻Test": {
    "name": "Unicode❤♻Test",
    "metadata_name": "Unicode❤♻Test",
    "summary": "A sample with Unicode characters in file, material, and mesh names",
    "description": "A sample with Unicode characters in file, material, and mesh names"
  },
  "UnlitTest": {
    "name": "UnlitTest",
    "metadata_name": "UnlitTest",
    "summary": "Tests if the KHR_materials_unlit extension is supported properly.",
    "description": "Tests if the KHR_materials_unlit extension is supported properly."
  },
  "VertexColorTest": {
    "name": "VertexColorTest",
    "metadata_name": "VertexColorTest",
    "summary": "Tests if vertex colors are supported.",
    "description": "Tests if vertex colors are supported."
  },
  "VirtualCity": {
    "name": "VirtualCity",
    "metadata_name": "VirtualCity",
    "summary": "The 'Virtual City' model was graciously contributed by the folks at 3DRT.",
    "description": "The 'Virtual City' model was graciously contributed by the folks at 3DRT."
  },
  "WaterBottle": {
    "name": "WaterBottle",
    "metadata_name": "WaterBottle",
    "summary": "Basic metal/roughness water bottle.",
    "description": "Basic metal/roughness water bottle."
  },
  "XmpMetadataRoundedCube": {
    "name": "XmpMetadataRoundedCube",
    "metadata_name": "XmpMetadataRoundedCube",
    "summary": "Test of the XMP metadata extension - KHR_xmp_json_ld.",
    "description": "Test of the XMP metadata extension - KHR_xmp_json_ld."
  }
}